name: Build and Deploy
on:
    push:
        branches: [main, master]
        # Publish semver tags as releases.
        tags: ["v*.*.*"]
    workflow_dispatch:

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                services:
                    [
                        {
                            "imageName": "graphql-api",
                            "directory": "./packages/graphql-api",
                        },
                        {
                            "imageName": "cod-to-disk",
                            "directory": "./packages/cod-to-disk",
                        },
                        {
                            "imageName": "cod-processor",
                            "directory": "./packages/cod-processor",
                        },
                        {
                            "imageName": "sync-orchestrator",
                            "directory": "./packages/sync-orchestrator",
                        },
                    ]
        permissions:
            contents: read
            packages: write
        outputs:
            containerImage-graphql-api: ${{ steps.image-tag.outputs.image-graphql-api }}
            containerImage-cod-to-disk: ${{ steps.image-tag.outputs.image-cod-to-disk }}
            containerImage-cod-processor: ${{ steps.image-tag.outputs.image-cod-processor }}
            containerImage-sync-orchestrator: ${{ steps.image-tag.outputs.image-sync-orchestrator }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            # Login against a Docker registry except on PR
            # https://github.com/docker/login-action
            - name: Log into registry ${{ env.REGISTRY }}
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v1
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Extract metadata (tags, labels) for Docker
            # https://github.com/docker/metadata-action
            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v3
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.services.imageName }}
                  tags: |
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=semver,pattern={{major}}
                      type=ref,event=branch
                      type=sha

            # Build and push Docker image with Buildx (don't push on PR)
            # https://github.com/docker/build-push-action
            - name: Build and push Docker image
              uses: docker/build-push-action@v2
              with:
                  context: ${{ matrix.services.directory }}
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Output image tag
              id: image-tag
              run: echo "::set-output name=image-${{ matrix.services.imageName }}::${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.services.imageName }}:sha-$(git rev-parse --short HEAD)" | tr '[:upper:]' '[:lower:]'

    deploy:
        runs-on: ubuntu-latest
        needs: [build]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Deploy bicep
              uses: azure/CLI@v1
              with:
                  inlineScript: |
                      echo '===================================================='
                      echo 'Deploying to Azure with following parameters:'
                      echo ${{ needs.build.outputs.containerImage-graphql-api }}
                      echo ${{ needs.build.outputs.containerImage-cod-to-disk }}
                      echo ${{ needs.build.outputs.containerImage-cod-processor }}
                      echo ${{ needs.build.outputs.containerImage-sync-orchestrator }}
                      echo ${{ env.REGISTRY }}
                      echo ${{ github.actor }}
                      echo '===================================================='
                      az group create -g ${{ secrets.RESOURCE_GROUP }} -l westeurope
                      az deployment group create -g ${{ secrets.RESOURCE_GROUP }} -f ./deploy/main.bicep \
                       -p \
                          environmentName='dev' \
                          syncOrchestratorImage='${{ needs.build.outputs.containerImage-sync-orchestrator }}' \
                          graphQLImage='${{ needs.build.outputs.containerImage-graphql-api }}' \
                          codToDiskImage='${{ needs.build.outputs.containerImage-cod-to-disk }}' \
                          codProcessorImage='${{ needs.build.outputs.containerImage-cod-processor }}' \
                          mongoConnection='${{ secrets.MONGO_CONNECTION }}' \
                          registry=${{ env.REGISTRY }} \
                          registryUsername=${{ github.actor }} \
                          registryPassword=${{ secrets.PACKAGES_TOKEN }}
